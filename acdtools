#!/bin/bash

# ACDTools

# Set directory of current script
# http://stackoverflow.com/a/246128/811814
SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do
    DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
    SOURCE="$(readlink "$SOURCE")"
    [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
done
DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"


# Determine configuration file path and load it

# If -c is set, then set that value as ${OPTARG}
while getopts ":c:" opt; do
    case $opt in
        c)
            echo "User defined configuration file at ${OPTARG}"
            CONFOPT=${OPTARG}
            ;;
    esac
done

if [ ${CONFOPT} ] && [ -f ${CONFOPT} ]; then
    # Ensure user defined configuration exists
    CONFIGPATH=${CONFOPT}
elif [ -f ${PWD}/vars ]; then
    # Check if configuration exists in PWD
    CONFIGPATH=${PWD}/vars
elif [ -f ${DIR}/vars ]; then
    # Check if configuration exists in the script directory
    CONFIGPATH=${DIR}/vars
fi

# If no valid configuation path, kill the script.
if [ ! ${CONFIGPATH} ]; then
    echo -n 'No valid configuration can be found. '
    echo    'Use -c to define a configuration.'
    exit 1
else
    echo "Using configuration at ${CONFIGPATH}"
    source ${CONFIGPATH}
fi

# TODO: Config validity


# Functions

# Unmount a mountpoint. Will not unmount if not already mounted.
# TODO: fusermount does not exist on OS X, make compatible.
function ACDToolsUnmount {
    # Check if ${1} is a mountpoint (remove trailing slash)
    ISMOUNTPOINT=`mount | grep ${1%/} | wc -l`
    if [ ${ISMOUNTPOINT} -eq "0" ]; then
        echo "Can not unmount ${1} - it is not mounted"
    else
        echo "Unmounting ${1}"
        fusermount -u ${1}
    fi
}

# Function to unmount all mountpoints associated with ACDTools
function ACDToolsUnmountAll {
    echo "Unmounting all ACDTools mountpoints"
    ACDToolsUnmount ${DATADIR}
    ACDToolsUnmount ${MOUNTBASE}/acd-encrypted/
    ACDToolsUnmount ${MOUNTBASE}/acd-decrypted/
    ACDToolsUnmount ${MOUNTBASE}/local-encrypted/
}

# Function to sync node cache 
function ACDToolsSyncNodes {
    echo "Syncing acdcli node cache database"
    ${ACDCLI} psync / # Sync root node first because of acdcli bug

    if [ "$1" == "full" ]; then
        echo "Full acdcli node cache sync in progress, this may take a while"
        ${ACDCLI} sync -f
        ${ACDCLI} psync / # Sync root node first because of acdcli bug
    else
        ${ACDCLI} sync
    fi
}

# Function to mount everything for ACDTools
function ACDToolsMount {
    # Create mountpoint directories
    mkdir -p ${MOUNTBASE}/acd-encrypted/ \
        ${MOUNTBASE}/acd-decrypted/ \
        ${MOUNTBASE}/local-decrypted/ \
        ${MOUNTBASE}/local-encrypted/ \
        ${DATADIR} 2>/dev/null

    # Ensure the ACD Subdir exists
    ${ACDCLI} mkdir -p ${ACDSUBDIR}
    # TODO: If this exists, a warning appears - guess this should be hidden

    # Mount everything
    screen -dm -S acd-mount ${ACDCLI} mount -fg \
        --modules="subdir,subdir=${ACDSUBDIR}" ${MOUNTBASE}/acd-encrypted/
    encfs --extpass="echo ${ENCFSPASS}" --reverse \
        ${MOUNTBASE}/local-decrypted/ ${MOUNTBASE}/local-encrypted/
    encfs --extpass="echo ${ENCFSPASS}" \
        ${MOUNTBASE}/acd-encrypted/ ${MOUNTBASE}/acd-decrypted/
    unionfs-fuse -o cow,allow_other \
        ${MOUNTBASE}/local-decrypted=RW:${MOUNTBASE}/acd-decrypted=RO \
        ${DATADIR}
}

# Function to print usage of ACDTools
function ACDToolsUsage {
    echo $"Usage: $0 {mount|unmount|upload|sync|syncdeletes}"
}

# Reflect unionfs deleted file objects on Amazon Drive
function ACDToolsSyncDeletes {
    ACDMOUNT="${MOUNTBASE}/acd-encrypted/"
    SEARCHDIR="${MOUNTBASE}/local-decrypted/.unionfs-fuse/"

    if [ -d "$SEARCHDIR" ]; then
       MATCHED=$(find ${SEARCHDIR} -type f -name '*_HIDDEN~')
    else
        # There's no need to proceed with this function
        echo "No .unionfs-fuse/ directory found, nothing to delete"
        return
    fi

    # Set the for delimiter
    IFS='
    '

    # For every file listed by the find command
    for file in ${MATCHED}; do

        # Trim off the full path and hidden flag to get the real file path
        FILENAME=$(echo ${file} | grep -oP "^${SEARCHDIR}\K.*")
        FILENAME=${FILENAME%_HIDDEN~}

        ENCNAME=$(encfsctl encode --extpass="echo ${ENCFSPASS}" \
            ${ACDMOUNT} "${FILENAME}")

        ACDEXIST=$(${ACDCLI} ls ${ACDSUBDIR}/${ENCNAME} > /dev/null 2>&1; \
            echo $?)
        if [ "${ACDEXIST}" -eq "0" ]; then
            # File does exist, delete it from Amazon Drive
            echo "${file} exists on Amazon Drive - deleting"
            until `${ACDCLI} rm ${ACDSUBDIR}/${ENCNAME}`
            do
                # Failed delete - sleep and retry
                echo "Delete failed, trying again in 30 seconds"
                sleep 30
            done

            echo "${FILENAME} deleted from Amazon Drive"
        else
            echo "${file} is not on Amazon Drive"
        fi

        # Remove the UnionFS hidden object
        rm -rf ${file}

    done

    # Sync Amazon Drive changes
    ACDToolsSyncNodes

    # Delete the searchdir so that it is not uploaded as an empty directories
    rm -rf ${SEARCHDIR}
}

# Upload local data to Amazon Drive
function ACDToolsUpload {
    # Exit if already being executed
    RUNNINGPID=`cat ${DIR}/upload.pid 2>/dev/null`
    if [ -e /proc/${RUNNINGPID} ] && [ ! -z ${RUNNINGPID} ]; then
        echo Upload script already running
        exit 1
    else
        echo $$ > ${DIR}/upload.pid
    fi

    # Sync Deletes
    ACDToolsSyncDeletes

    # Logic for force syncing on repeated failure
    ULATTEMPTS=0

    # Upload to Amazon Drive
    until ${ACDCLI} upload -o ${MOUNTBASE}/local-encrypted/* ${ACDSUBDIR}
    do
        ULATTEMPTS=$((ULATTEMPTS+1))
        echo -n "Some uploads failed - uploading again after a sync "
        echo     "(attempt ${ULATTEMPTS})"

        if [ "${ULATTEMPTS}" -ge 3 ]; then
            echo "Uploads failed 3 (or more) times - Forcing full sync"
            ACDToolsSyncNodes full
        else
            ACDToolsSyncNodes
        fi
        sleep 60
    done

    echo "Upload Complete - Syncing changes"
    ACDToolsSyncNodes

    # Delete local files older than ${LOCALDAYS}
    ACDToolsLocalCleanup

    # Cleanup pidfile
    rm -rf ${DIR}/upload.pid
}

# Delete local data older than ${LOCALDAYS}
function ACDToolsLocalCleanup {
    echo "Deleting local files older than ${LOCALDAYS} days"

    find ${MOUNTBASE}/local-decrypted/ -type f \
        -mtime +${LOCALDAYS} -exec rm -rf {} \;
}

# Foreground acdcli mount which will catch non-zero exits
function ACDToolsACDCLIMount {
    echo "Running acd_cli in the foreground"
    ACDToolsUnmount ${MOUNTBASE}/acd-encrypted/

    until ${ACDCLI} -d mount -fg \
        --modules="subdir,subdir=${ACDSUBDIR}" ${MOUNTBASE}/acd-encrypted/
    do
        echo "The acdcli mount exited with a non-zero exitcode, remounting"
        ACDToolsUnmount ${MOUNTBASE}/acd-encrypted/
    done

    echo "The acdcli mount exited with a zero exit code"
}



# Determins what the user wants to do
ACTION=${*: -1:1} # TODO: This takes the last arg, doubt it is reliable.

case "${ACTION}" in
    mount)
        ACDToolsUnmountAll
        ACDToolsSyncNodes
        ACDToolsMount
        ;;
    unmount)
        ACDToolsUnmountAll
        ;;
    upload)
        ACDToolsUpload
        ;;
    sync)
        ACDToolsSyncNodes
        # TODO: Work out how to pass a full option to this
        ;;
    syncdeletes)
        ACDToolsSyncDeletes
        ;;
    usage)
        ACDToolsUsage
        ;;
    acdmount)
        ACDToolsACDCLIMount
        ;;
    *)
        ACDToolsUsage
        exit 1
esac
